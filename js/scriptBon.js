
  // üìç Obtenir la g√©olocalisation et la remplir dans les champs
  function getLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function(position) {
        document.getElementById('latitude').value = position.coords.latitude.toFixed(6);
        document.getElementById('longitude').value = position.coords.longitude.toFixed(6);
      }, function(error) {
        alert("Erreur de g√©olocalisation : " + error.message);
      });
    } else {
      alert("La g√©olocalisation n'est pas support√©e par ce navigateur.");
    }
  }

  // ‚úÖ Sauvegarde et traitement du formulaire complet
  function sauvegarderDonnees(event) {
    event.preventDefault(); // emp√™che le rechargement

    const form = document.getElementById('questionnaireForm');
    const formData = new FormData(form);
    const donnees = {};

    // Traitement des champs simples et multiples
    formData.forEach((value, key) => {
      if (donnees[key]) {
        if (!Array.isArray(donnees[key])) {
          donnees[key] = [donnees[key]];
        }
        donnees[key].push(value);
      } else {
        donnees[key] = value;
      }
    });

    // Traitement de la photo (fichier ‚Üí base64)
    const photoInput = document.getElementById('photoInput');
    const fichierPhoto = photoInput.files[0];

    if (fichierPhoto) {
      const reader = new FileReader();
      reader.onload = function (e) {
        donnees.photo = e.target.result; // image en base64
        finaliserSauvegarde(donnees);
      };
      reader.readAsDataURL(fichierPhoto);
    } else {
      finaliserSauvegarde(donnees);
    }
  }

  // üíæ Sauvegarde dans localStorage et mise √† jour du lien de t√©l√©chargement
  function finaliserSauvegarde(donnees) {
    // Charger les anciennes r√©ponses
    let reponses = JSON.parse(localStorage.getItem('reponses') || '[]');
    reponses.push(donnees);

    // Sauvegarde de l'historique complet
    localStorage.setItem('reponses', JSON.stringify(reponses));

    // Mise √† jour du lien JSON
    mettreAJourLienJSON(reponses);

    // Message √† l'utilisateur
    afficherMessage('‚úÖ Donn√©es enregistr√©es localement !');
    
    // R√©initialisation du formulaire
    document.getElementById('questionnaireForm').reset();
  }

  // üîÅ Met √† jour le lien de t√©l√©chargement JSON
  function mettreAJourLienJSON(dataArray = null) {
    if (!dataArray) {
      const fromLocal = localStorage.getItem('reponses');
      if (!fromLocal) return;
      dataArray = JSON.parse(fromLocal);
    }

    const blob = new Blob([JSON.stringify(dataArray, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const lien = document.getElementById('lienJSON');
    lien.href = url;
    lien.download = 'formulaire.json';
    lien.textContent = "üìÑ T√©l√©charger les donn√©es JSON";
    lien.style.display = 'inline-block';
  }

  // üü© Message d'alerte
  function afficherMessage(texte) {
    document.getElementById("message").innerHTML = `<div class='alert alert-success'>${texte}</div>`;
  }

  // ‚ñ∂Ô∏è Initialisation
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('questionnaireForm').addEventListener('submit', sauvegarderDonnees);
    mettreAJourLienJSON(); // au chargement
  });

  function afficherLocalStorage() {
    const data = localStorage.getItem('reponses');
    document.getElementById('affichageDonn√©es').textContent = data || 'Aucune donn√©e trouv√©e.';
  }

  // Fonction pour pr√©parer un email avec les donn√©es en pi√®ce jointe
function preparerEmailAvecDonnees() {
  // R√©cup√©rer les donn√©es du localStorage
  const donnees = localStorage.getItem('questionnaireData');
  
  if (!donnees) {
    alert("Aucune donn√©e √† envoyer");
    return;
  }
  
  // Cr√©er un blob avec les donn√©es
  const blob = new Blob([donnees], { type: 'application/json' });
  
  // Cr√©er un objet URL pour le blob
  const url = URL.createObjectURL(blob);
  
  // Pr√©parer le corps du message
  const corps = "Veuillez trouver ci-joint les donn√©es du questionnaire.";
  
  // Cr√©er un lien pour ouvrir le client mail
  const mailtoLink = document.createElement('a');
  mailtoLink.href = `mailto:ekissivincent@gmail.com?subject=Donn√©es du questionnaire&body=${encodeURIComponent(corps)}`;
  
  // Ouvrir le client mail
  mailtoLink.click();
  
  // Afficher des instructions pour joindre le fichier manuellement
  alert("Votre client mail va s'ouvrir. Veuillez joindre manuellement le fichier JSON que vous avez t√©l√©charg√© pr√©c√©demment.");
}

// Ajouter un bouton pour envoyer par email dans votre interface
function ajouterBoutonEmail() {
  // Cr√©er le bouton
  const boutonEmail = document.createElement('button');
  boutonEmail.type = 'button';
  boutonEmail.className = 'btn btn-info mt-3';
  boutonEmail.textContent = 'Pr√©parer un email avec les donn√©es';
  boutonEmail.onclick = preparerEmailAvecDonnees;
  
  // Ajouter le bouton apr√®s le lien de t√©l√©chargement
  const lienJSON = document.getElementById('lienJSON');
  lienJSON.parentNode.insertBefore(boutonEmail, lienJSON.nextSibling);
  lienJSON.parentNode.insertBefore(document.createElement('br'), boutonEmail);
}

// Modifier la fonction de soumission du formulaire pour ajouter le bouton d'email
document.getElementById('questionnaireForm').addEventListener('submit', function(event) {
  event.preventDefault();
  
  // R√©cup√©rer les donn√©es du formulaire
  const formData = new FormData(this);
  const formObject = {};
  formData.forEach((value, key) => {
    formObject[key] = value;
  });
  
  // Ajouter la date et l'heure
  formObject.timestamp = new Date().toISOString();
  
  // R√©cup√©rer les donn√©es existantes du localStorage
  let data = JSON.parse(localStorage.getItem('questionnaireData') || '{"parcours":[]}');
  
  // Ajouter les nouvelles donn√©es
  if (!data.parcours) {
    data.parcours = [];
  }
  data.parcours.push(formObject);
  
  // Sauvegarder dans localStorage
  localStorage.setItem('questionnaireData', JSON.stringify(data));
  
  // Cr√©er un fichier JSON t√©l√©chargeable
  const jsonData = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonData], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  // Configurer le lien de t√©l√©chargement
  const lienJSON = document.getElementById('lienJSON');
  lienJSON.href = url;
  lienJSON.download = 'data.json';
  lienJSON.textContent = 'T√©l√©charger les donn√©es JSON';
  lienJSON.style.display = 'inline-block';
  
  // Ajouter le bouton d'email
  ajouterBoutonEmail();
  
  // Afficher un message de succ√®s
  document.getElementById('message').innerHTML = 
    '<div class="alert alert-success">Donn√©es enregistr√©es localement. T√©l√©chargez le fichier JSON ou pr√©parez un email.</div>';
});// Fonction am√©lior√©e pour pr√©parer un email avec les donn√©es en pi√®ce jointe
function preparerEmailAvecDonnees() {
  // R√©cup√©rer les donn√©es du localStorage
  const donnees = localStorage.getItem('questionnaireData');
  
  if (!donnees) {
    alert("Aucune donn√©e √† envoyer");
    return;
  }
  
  // Cr√©er un blob avec les donn√©es
  const blob = new Blob([donnees], { type: 'application/json' });
  
  // Cr√©er un objet URL pour le blob
  const url = URL.createObjectURL(blob);
  
  // T√©l√©charger automatiquement le fichier
  const downloadLink = document.createElement('a');
  downloadLink.href = url;
  downloadLink.download = 'donnees_questionnaire.json';
  document.body.appendChild(downloadLink);
  downloadLink.click();
  document.body.removeChild(downloadLink);
  
  // Attendre un peu pour que le t√©l√©chargement commence
  setTimeout(() => {
    // Pr√©parer le corps du message avec des instructions claires
    const corps = "Bonjour,\n\nVeuillez trouver ci-joint les donn√©es du questionnaire que je viens de compl√©ter.\n\nMerci.";
    
    // Cr√©er un lien pour ouvrir le client mail
    const mailtoLink = document.createElement('a');
    mailtoLink.href = `mailto:destinataire@example.com?subject=Donn√©es du questionnaire&body=${encodeURIComponent(corps)}`;
    mailtoLink.click();
    
    // Afficher des instructions d√©taill√©es
    alert("1. Le fichier JSON a √©t√© t√©l√©charg√© automatiquement\n2. Votre client mail va maintenant s'ouvrir\n3. Veuillez joindre le fichier 'donnees_questionnaire.json' que vous venez de t√©l√©charger √† votre email");
  }, 500);
}// Fonction am√©lior√©e pour pr√©parer un email avec les donn√©es en pi√®ce jointe
function preparerEmailAvecDonnees() {
  // R√©cup√©rer les donn√©es du localStorage
  const donnees = localStorage.getItem('questionnaireData');
  
  if (!donnees) {
    alert("Aucune donn√©e √† envoyer");
    return;
  }
  
  // Cr√©er un blob avec les donn√©es
  const blob = new Blob([donnees], { type: 'application/json' });
  
  // Cr√©er un objet URL pour le blob
  const url = URL.createObjectURL(blob);
  
  // T√©l√©charger automatiquement le fichier
  const downloadLink = document.createElement('a');
  downloadLink.href = url;
  downloadLink.download = 'donnees_questionnaire.json';
  document.body.appendChild(downloadLink);
  downloadLink.click();
  document.body.removeChild(downloadLink);
  
  // Attendre un peu pour que le t√©l√©chargement commence
  setTimeout(() => {
    // Pr√©parer le corps du message avec des instructions claires
    const corps = "Bonjour,\n\nVeuillez trouver ci-joint les donn√©es du questionnaire que je viens de compl√©ter.\n\nMerci.";
    
    // Cr√©er un lien pour ouvrir le client mail
    const mailtoLink = document.createElement('a');
    mailtoLink.href = `mailto:destinataire@example.com?subject=Donn√©es du questionnaire&body=${encodeURIComponent(corps)}`;
    mailtoLink.click();
    
    // Afficher des instructions d√©taill√©es
    alert("1. Le fichier JSON a √©t√© t√©l√©charg√© automatiquement\n2. Votre client mail va maintenant s'ouvrir\n3. Veuillez joindre le fichier 'donnees_questionnaire.json' que vous venez de t√©l√©charger √† votre email");
  }, 500);
}
